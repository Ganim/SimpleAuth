// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  ADMIN
  MANAGER
  USER
}

model User {
  id String @id @default(uuid())

  // Credentials
  username      String? @unique @db.VarChar(32)
  email         String  @unique @db.VarChar(254)
  password_hash String  @db.VarChar(100)

  // User Roles
  role Role @default(USER)

  // Access Control
  lastLoginIp         String?   @map("last_login_ip")
  failedLoginAttempts Int       @default(0) @map("failed_login_attempts")
  blockedUntil        DateTime? @map("blocked_until")

  // Recovery
  passwordResetToken   String?   @map("password_reset_token")
  passwordResetExpires DateTime? @map("password_reset_expires")

  // Soft Delete
  deletedAt DateTime? @map("deleted_at")

  // Audit
  lastLoginAt DateTime? @map("last_login_at")
  createdAt   DateTime  @default(now()) @map("created_at")
  updatedAt   DateTime  @updatedAt @map("updated_at")

  // Relations
  profile      UserProfile?
  RefreshToken RefreshToken[]

  // Optimizations
  @@index([failedLoginAttempts, blockedUntil, lastLoginIp])
  @@index([passwordResetToken, passwordResetExpires])
  @@index([role])
  @@index([email, deletedAt])
  @@index([username, deletedAt])
  @@index([id, deletedAt])
  @@map("users")
}

model UserProfile {
  id     String @id @default(uuid())
  userId String @unique @map("user_id")

  // Personal Information
  name     String?   @db.VarChar(64)
  surname  String?   @db.VarChar(64)
  birthday DateTime?
  location String?   @db.VarChar(128)

  // Secondary Information
  bio       String? @db.VarChar(256)
  avatarUrl String? @map("avatar_url") @db.VarChar(512)

  // Audit
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@map("user_profiles")
}

model RefreshToken {
  id     String @id @default(uuid())
  userId String @map("user_id")

  // Session Data
  token     String    @unique @db.VarChar(512)
  expiresAt DateTime  @map("expires_at")
  createdAt DateTime  @default(now()) @map("created_at")
  revokedAt DateTime? @map("revoked_at")

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([token])
  @@map("refresh_tokens")
}
